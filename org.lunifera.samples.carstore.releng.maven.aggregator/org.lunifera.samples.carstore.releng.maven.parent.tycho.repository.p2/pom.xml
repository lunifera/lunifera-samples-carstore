<!--#======================================================================= -->
<!--# Copyright (c) 2012, 2014 C4biz Softwares ME, Loetz KG. -->
<!--# All rights reserved. This program and the accompanying materials -->
<!--# are made available under the terms of the Eclipse Public License v1.0 -->
<!--# which accompanies this distribution, and is available at -->
<!--# http://www.eclipse.org/legal/epl-v10.html -->
<!--# -->
<!--# Contributors: -->
<!--# Cristiano GaviÃ£o (C4biz)- initial API and implementation -->
<!--#======================================================================= -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.lunifera.samples.carstore</groupId>
		<artifactId>org.lunifera.samples.carstore.releng.maven.parent.tycho</artifactId>
		<version>0.0.1-SNAPSHOT</version>
		<relativePath>../org.lunifera.samples.carstore.releng.maven.parent.tycho/pom.xml</relativePath>
	</parent>

	<artifactId>org.lunifera.samples.carstore.releng.maven.parent.tycho.repository.p2</artifactId>
	<packaging>pom</packaging>

	<properties>
		<!-- encoded files needed by ant task -->
		<encoded.p2index>dmVyc2lvbiA9IDEKIG1ldGFkYXRhLnJlcG9zaXRvcnkuZmFjdG9yeS5vcmRlciA9IGNvbXBvc2l0ZUNvbnRlbnQueG1sLFwhCiBhcnRpZmFjdC5yZXBvc2l0b3J5LmZhY3Rvcnkub3JkZXIgPSBjb21wb3NpdGVBcnRpZmFjdHMueG1sLFwh</encoded.p2index>
		<encoded.compositeArtifacts>PD94bWwgdmVyc2lvbj0nMS4wJyBlbmNvZGluZz0nVVRGLTgnPz4KPD9jb21wb3NpdGVBcnRpZmFjdFJlcG9zaXRvcnkgdmVyc2lvbj0nMS4wLjAnPz4KPHJlcG9zaXRvcnkgbmFtZT0nTHVuaWZlcmEgVXBkYXRlIFNpdGUnIHR5cGU9J29yZy5lY2xpcHNlLmVxdWlub3guaW50ZXJuYWwucDIuYXJ0aWZhY3QucmVwb3NpdG9yeS5Db21wb3NpdGVBcnRpZmFjdFJlcG9zaXRvcnknIHZlcnNpb249JzEuMC4wJz4KICA8cHJvcGVydGllcyBzaXplPScxJz4KCTxwcm9wZXJ0eSBuYW1lPSdwMi50aW1lc3RhbXAnIHZhbHVlPScxMjQzODIyNTAyNDQwJy8+CiAgPC9wcm9wZXJ0aWVzPgogIDxjaGlsZHJlbiBzaXplPScwJz4JCiAgPC9jaGlsZHJlbj4KPC9yZXBvc2l0b3J5Pg==</encoded.compositeArtifacts>
		<encoded.compositeContent>PD94bWwgdmVyc2lvbj0nMS4wJyBlbmNvZGluZz0nVVRGLTgnPz4KPD9jb21wb3NpdGVNZXRhZGF0YVJlcG9zaXRvcnkgdmVyc2lvbj0nMS4wLjAnPz4KPHJlcG9zaXRvcnkgbmFtZT0nTHVuaWZlcmEgVXBkYXRlIFNpdGUnIHR5cGU9J29yZy5lY2xpcHNlLmVxdWlub3guaW50ZXJuYWwucDIubWV0YWRhdGEucmVwb3NpdG9yeS5Db21wb3NpdGVNZXRhZGF0YVJlcG9zaXRvcnknIHZlcnNpb249JzEuMC4wJz4KICA8cHJvcGVydGllcyBzaXplPScxJz4KCTxwcm9wZXJ0eSBuYW1lPSdwMi50aW1lc3RhbXAnIHZhbHVlPScxMjQzODIyNTAyNDk5Jy8+CiAgPC9wcm9wZXJ0aWVzPgogIDxjaGlsZHJlbiBzaXplPScwJz4KICA8L2NoaWxkcmVuPgo8L3JlcG9zaXRvcnk+</encoded.compositeContent>

		<!-- this properties can be overrided for each repository POM -->
		<lunifera.deployment.p2.label>${project.artifactId}</lunifera.deployment.p2.label>
		<lunifera.developer.home.repositories>${lunifera.developer.home}${file.separator}repositories${file.separator}</lunifera.developer.home.repositories>
	</properties>

	<profiles>
		<profile>
			<id>deploy.p2</id>
			<activation>
				<property>
					<name>lunifera.deploy.to.local.federated.p2</name>
				</property>
			</activation>
			<properties>
				<lunifera.deployment.p2.log.file.path>${project.basedir}${file.separator}build.${lunifera.deployment.p2.label}.${lunifera.build.eclipse.platform.name}.${lunifera.build.branch}.log.properties</lunifera.deployment.p2.log.file.path>
				<lunifera.deployment.p2.origin.dir>${project.build.directory}${file.separator}repository</lunifera.deployment.p2.origin.dir>
				<lunifera.deployment.p2.target.dir>${lunifera.developer.home.repositories}${lunifera.federated.repository.label}${file.separator}${lunifera.build.eclipse.platform.name}${file.separator}${lunifera.build.branch}${file.separator}${lunifera.deployment.p2.label}${file.separator}${lunifera.deployment.artifact.version}</lunifera.deployment.p2.target.dir>
			</properties>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<id>generate-files</id>
								<phase>verify</phase>
								<configuration>
									<quiet>true</quiet>
									<target>
										<taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy">
											<classpath refid="maven.compile.classpath" />
										</taskdef>
										<taskdef resource="net/sf/antcontrib/antlib.xml" />
										<taskdef resource="net/sf/antcontrib/antcontrib.properties" />
										<taskdef name="xmltask"
											classname="com.oopsconsultancy.xmltask.ant.XmlTask" />

										<echo
											message="Federated Repository Local Dir (lunifera.build.local.federated.p2.dir): ${lunifera.build.local.federated.p2.dir}" />
										<echo message="Platform: ${lunifera.build.eclipse.platform.name}" />
										<echo message="Build Type: ${lunifera.build.branch}" />
										<echo message="Repo Name: ${lunifera.deployment.p2.label}" />
										<echo message="Repo Keep Old: ${lunifera.deployment.p2.keep.old}" />
										<echo message="Repo Version: ${lunifera.deployment.artifact.version}" />
										<echo message="Log File (lunifera.deployment.p2.log.file.path): ${lunifera.deployment.p2.log.file.path}" />
										<echo message="P2 Source Dir (lunifera.deployment.p2.origin.dir): ${lunifera.deployment.p2.origin.dir}" />
										<echo message="P2 Target Dir (lunifera.deployment.p2.target.dir): ${lunifera.deployment.p2.target.dir}" />

										<!-- "init" -->
										<fail
											message="There property 'lunifera.developer.home' was not defined in settings.xml or in commandline.">
											<condition>
												<or>
													<not>
														<isset property="lunifera.developer.home" />
													</not>
													<equals arg1="${lunifera.developer.home}" arg2="none" />
												</or>
											</condition>
										</fail>
										<if>
											<not>
												<available file="${lunifera.developer.home}"
													type="dir" />
											</not>
											<then>
												<mkdir dir="${lunifera.developer.home}" />
											</then>
										</if>
										<if>
											<not>
												<available file="${lunifera.developer.home.repositories}"
													type="dir" />
											</not>
											<then>
												<mkdir dir="${lunifera.developer.home.repositories}" />
											</then>
										</if>
										<if>
											<not>
												<available file="${lunifera.build.local.federated.p2.dir}"
													type="dir" />
											</not>
											<then>
												<mkdir dir="${lunifera.build.local.federated.p2.dir}" />
											</then>
										</if>
										<groovy>
											ant.echo "Extracted building templates..."

											def separator =
											"${properties['file.separator']}"
											def directory =
											"${properties['project.build.directory']}" + separator +
											"templates" + separator

											new
											File(directory).mkdir()

											def encodedP2index =
											"${properties['encoded.p2index']}"
											def
											encodedCompositeArtifacts =
											"${properties['encoded.compositeArtifacts']}"
											def
											encodedCompositeContent =
											"${properties['encoded.compositeContent']}"

											properties.p2indexFile = directory + "p2.index"
											properties.compositeArtifactsFile = directory +
											"compositeArtifacts.xml"
											properties.compositeContentFile =
											directory + "compositeContent.xml"

											new
											FileOutputStream(properties.p2indexFile).write(encodedP2index.decodeBase64())
											new
											FileOutputStream(properties.compositeArtifactsFile).write(encodedCompositeArtifacts.decodeBase64())
											new
											FileOutputStream(properties.compositeContentFile).write(encodedCompositeContent.decodeBase64())

										</groovy>
										<echo
											message="** Lunifera User Developer Home: ${lunifera.developer.home}" />
										<echo
											message=" -  index source: ${p2indexFile}" />
										<echo
											message=" -  contentFile source: ${compositeContentFile}" />
										<echo
											message=" -  artifactsFile source: ${compositeArtifactsFile}" />

										<!-- generate.composite.p2.init -->
											
										<fail message="Could not find p2.index template at ${p2indexFile} !">
											<condition>
												<not>
													<available file="${p2indexFile}" type="file" />
												</not>
											</condition>
										</fail>

										<fail
											message="Could not find compositeContent.xml template at ${compositeContentFile} !">
											<condition>
												<not>
													<available
														file="${compositeContentFile}"
														type="file" />
												</not>
											</condition>
										</fail>

										<fail
											message="Could not find compositeArtifacts.xml template at ${compositeArtifactsFile} !">
											<condition>
												<not>
													<available
														file="${compositeArtifactsFile}"
														type="file" />
												</not>
											</condition>
										</fail>
										
										<!-- "deploy.generated.p2.to.composite.dir.init" -->
										<echo message="Copying repo to Federated Repository !!!" />
										<if>
											<available file="${lunifera.deployment.p2.log.file.path}"
												type="file" />
											<then>
												<echo message="OPEN BUILD LOG" />
												<property file="${lunifera.deployment.p2.log.file.path}"
													prefix="old" />
												<echoproperties prefix="old." />
											</then>
										</if>

										<!-- deploy.generated.p2.to.composite.dir.clean -->
										<!-- remove the latest built repository directory -->
										<if>
											<and>
												<equals arg1="${lunifera.deployment.p2.keep.old}"
													arg2="false" />
												<available file="${old.lunifera.deployment.p2.target.dir}"
													type="dir" />
											</and>
											<then>
												<echo message="REMOVING OLD BUILD" />
												<delete includeemptydirs="true" failonerror="false">
													<fileset includes="**/*"
														dir="${old.lunifera.deployment.p2.target.dir}" />
												</delete>
												<delete dir="${old.lunifera.deployment.p2.target.dir}" />
											</then>
										</if>
										<!-- remove an existent repository directory -->
										<if>
											<available file="${lunifera.deployment.p2.target.dir}"
												type="dir" />
											<then>
												<delete includeemptydirs="true" failonerror="false">
													<fileset includes="**/*"
														dir="${lunifera.deployment.p2.target.dir}" />
												</delete>
												<delete dir="${lunifera.deployment.p2.target.dir}" />
											</then>
										</if>

										<!-- deploy.generated.p2.to.composite.p2 -->
										<!-- create the repository directory and copy files from the generated 
											P2 -->
										<echo message="COPYING P2" />
										<if>
											<available file="${lunifera.deployment.p2.origin.dir}"
												type="dir" />
											<then>
												<mkdir dir="${lunifera.deployment.p2.target.dir}" />
												<copy todir="${lunifera.deployment.p2.target.dir}">
													<fileset dir="${lunifera.deployment.p2.origin.dir}"
														includes="**/*" />
												</copy>
												<if>
													<equals arg1="${lunifera.deployment.p2.keep.old}"
														arg2="false" />
													<then>
														<propertyfile file="${lunifera.deployment.p2.log.file.path}"
															comment="Building log for ${lunifera.build.eclipse.platform.name} - ${lunifera.build.branch}">
															<entry key="build.counter" type="int" default="0"
																operation="+" />
															<entry key="build.date" type="date" value="now" />
															<entry key="lunifera.deployment.artifact.version"
																value="${lunifera.deployment.artifact.version}" />
															<entry key="lunifera.deployment.p2.target.dir"
																value="${lunifera.deployment.p2.target.dir}" />
														</propertyfile>
													</then>
													<else>
														<propertyfile file="${lunifera.deployment.p2.log.file.path}"
															comment="Building log for ${lunifera.build.eclipse.platform.name} - ${lunifera.build.branch}">
															<entry key="build.counter" type="int" default="0"
																operation="+" />
															<entry key="build.date" type="date" value="now" />
															<entry key="lunifera.build.local.federated.p2.dir"
																value="${lunifera.build.local.federated.p2.dir}" />
															<entry key="lunifera.deployment.artifact.versions"
																default="" operation="+"
																value=",${lunifera.deployment.artifact.version}" />
														</propertyfile>
													</else>
												</if>
											</then>
											<else>
												<fail
													message="The P2 repository was not generated in '${lunifera.deployment.p2.origin.dir}' !" />
											</else>
										</if>
										
										
										<!-- start rebuilding... -->
										<echo message="Rebuilding Federated Repository !!!" />
										<echo
											message=" (lunifera.build.local.federated.p2.dir): ${lunifera.build.local.federated.p2.dir}" />
								
										<dirset id="dirs" dir="${lunifera.build.local.federated.p2.dir}"
											includes="*/*" />
										
										<fail message="There is no repositories to process !">
											<condition>
												<resourcecount when="equal" count="0" refid="dirs" />
											</condition>
										</fail>

										<if>
											<available
												file="${lunifera.build.local.federated.p2.dir}compositeContent.xml"
												type="file" />
											<then>
												<echo message="DELETED OLD CONTENT FILE" />
												<delete
													file="${lunifera.build.local.federated.p2.dir}compositeContent.xml" />
											</then>
										</if>
										<if>
											<available
												file="${lunifera.build.local.federated.p2.dir}compositeArtifacts.xml"
												type="file" />
											<then>
												<echo message="DELETED OLD ARTIFACTS FILE" />
												<delete
													file="${lunifera.build.local.federated.p2.dir}compositeArtifacts.xml" />
											</then>
										</if>

										<!-- generate.composite.p2.add.compositeContentFile -->
										<xmltask source="${compositeContentFile}"
											destbuffer="bufferCompositeContent" report="true" />
										<var name="counterContent" value="0" />
										<for param="child" list="${toString:dirs}" delimiter=";">
											<sequential>
												<math result="counterContent" operand1="${counterContent}"
													operand2="1" operation="+" datatype="int" />
												<echo message="Adding Content Child @{child} - ${counterContent}" />
												<xmltask sourcebuffer="bufferCompositeContent"
													destbuffer="bufferCompositeContent">
													<insert path="/repository/children">
						<![CDATA[ <child location='@{child}'/> ]]>
													</insert>
												</xmltask>
											</sequential>
										</for>
										<xmltask sourcebuffer="bufferCompositeContent"
											destbuffer="bufferCompositeContent">
											<replace path="/repository/children/@size" withText="${counterContent}" />
										</xmltask>

										<!-- generate.composite.p2.add.compositeArtifactsFile -->
										<xmltask
											source="${compositeArtifactsFile}"
											destbuffer="bufferCompositeArtifacts" report="true" />
										<var name="counterArtifacts" value="0" />
										<for param="child" list="${toString:dirs}" delimiter=";">
											<sequential>
												<math result="counterArtifacts" operand1="${counterArtifacts}"
													operand2="1" operation="+" datatype="int" />
												<echo message="Adding Artifact Child @{child} - ${counterArtifacts}" />
												<xmltask sourcebuffer="bufferCompositeArtifacts"
													destbuffer="bufferCompositeArtifacts">
													<insert path="/repository/children">
						<![CDATA[ <child location='@{child}'/> ]]>
													</insert>
												</xmltask>
											</sequential>
										</for>
										<xmltask sourcebuffer="bufferCompositeArtifacts"
											destbuffer="bufferCompositeArtifacts">
											<replace path="/repository/children/@size" withText="${counterArtifacts}" />
										</xmltask>

										<!-- generate.composite.p2.add.p2.index.file -->
										<if>
											<not>
												<available file="${lunifera.build.local.federated.p2.dir}p2.index"
													type="file" />
											</not>
											<then>
												<copy file="${p2indexFile}"
													todir="${lunifera.build.local.federated.p2.dir}" />
											</then>
										</if>

										<!-- generate.composite.p2 -->
										<echo message="CREATE COMPOSITE ARTIFACTS" />
										<xmltask sourcebuffer="bufferCompositeArtifacts"
											dest="${lunifera.build.local.federated.p2.dir}compositeArtifacts.xml" />

										<echo message="CREATE COMPOSITE CONTENT" />
										<xmltask sourcebuffer="bufferCompositeContent"
											dest="${lunifera.build.local.federated.p2.dir}compositeContent.xml" />

										<!-- end generation -->
										
									</target>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
							<execution>
								<id>refresh-master-repository</id>
								<phase>verify</phase>
								<configuration>
									<quiet>true</quiet>
									<target>

									</target>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
						</executions>
						<dependencies>
							<dependency>
								<groupId>org.codehaus.groovy</groupId>
								<artifactId>groovy-all</artifactId>
								<version>2.2.0</version>
							</dependency>
							<dependency>
								<groupId>org.apache.ant</groupId>
								<artifactId>ant</artifactId>
								<version>1.8.4</version>
							</dependency>
							<dependency>
								<groupId>ant-contrib</groupId>
								<artifactId>ant-contrib</artifactId>
								<version>1.0b3</version>
								<exclusions>
									<exclusion>
										<groupId>ant</groupId>
										<artifactId>ant</artifactId>
									</exclusion>
								</exclusions>
							</dependency>
							<dependency>
								<groupId>net.sf.saxon</groupId>
								<artifactId>Saxon-HE</artifactId>
								<version>9.4</version>
							</dependency>
							<dependency>
								<groupId>com.oopsconsultancy</groupId>
								<artifactId>xmltask</artifactId>
								<version>1.16</version>
							</dependency>
						</dependencies>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
