<!--#======================================================================= -->
<!--# Copyright (c) 2012, 2014 C4biz Softwares ME, Loetz KG. -->
<!--# All rights reserved. This program and the accompanying materials -->
<!--# are made available under the terms of the Eclipse Public License v1.0 -->
<!--# which accompanies this distribution, and is available at -->
<!--# http://www.eclipse.org/legal/epl-v10.html -->
<!--# -->
<!--# Contributors: -->
<!--# Cristiano GaviÃ£o (C4biz)- initial API and implementation -->
<!--#======================================================================= -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.lunifera.samples.carstore</groupId>
	<artifactId>org.lunifera.samples.carstore.releng.maven.parent</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>pom</packaging>

	<description>Lunifera - Maven based Release Engineering POM files.</description>

	<prerequisites>
		<!-- Maven 3.1.0 is the earliest version using Eclipse Aether, Maven 3.0.x 
			uses the predecessor Sonatype Aether -->
		<maven>3.1</maven>
	</prerequisites>

	<organization>
		<name>Lunifera.org</name>
		<url>www.lunifera.org</url>
	</organization>

	<licenses>
		<license>
			<name>Eclipse Public License v1.0</name>
			<url>http://www.eclipse.org/legal/epl-v10.html</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<issueManagement>
		<system>Jira</system>
		<url>https://lunifera.atlassian.net/browse/LUNCAR</url>
	</issueManagement>

	<distributionManagement>
		<repository>
			<id>lunifera-nexus-staging</id>
			<name>Nexus Release Repository</name>
			<url>http://maven.lunifera.org:8086/nexus/content/repositories/releases/</url>
		</repository>
		<snapshotRepository>
			<id>lunifera-nexus-snapshots</id>
			<name>Sonatype Nexus Snapshots</name>
			<url>http://maven.lunifera.org:8086/nexus/content/repositories/snapshots/</url>
		</snapshotRepository>
	</distributionManagement>

	<scm>
		<connection>scm:git:git://github.com/lunifera/samples-carstore.git</connection>
		<developerConnection>scm:git:ssh://git@github.com:lunifera/samples-carstore.git</developerConnection>
		<url>https://github.com/lunifera/samples-carstore</url>
	</scm>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<maven.build.timestamp.format>yyyyMMddHHmmss</maven.build.timestamp.format>
		<osgi-version-qualifier>${maven.build.timestamp}</osgi-version-qualifier>

		<!-- this properties must be set in settings.xml or using -Dlunifera.developer.home 
			in command line -->
		<lunifera.developer.home>none</lunifera.developer.home>

		<!-- this properties must be unique for the entire system -->
		<lunifera.federated.repository.label>carstore</lunifera.federated.repository.label>

		<!-- the branch used in the build of the project. this determines the behavior 
			of some steps and its properties. (branch latest head, milestone, release) -->
		<lunifera.build.branch>head</lunifera.build.branch>

		<!-- this indicate whether an old p2 published should be kept or not. this 
			should be determined by the builder.brach being used. -->
		<lunifera.deployment.p2.keep.old>false</lunifera.deployment.p2.keep.old>

		<lunifera.version>0.0.1-SNAPSHOT</lunifera.version>

		<distribution.repository.release.url>http://maven.lunifera.org:8086/nexus/content/repositories/releases/</distribution.repository.release.url>
		<distribution.repository.snapshot.url>http://maven.lunifera.org:8086/nexus/content/repositories/snapshots/</distribution.repository.snapshot.url>

	</properties>

	<profiles>
		<profile>
			<id>set.deployment.location</id>
			<activation>
				<property>
					<name>!lunifera.developer.home</name>
				</property>
			</activation>
			<properties>
				<lunifera.developer.home>${env.HOME}${file.separator}lunifera-dev${file.separator}</lunifera.developer.home>
			</properties>
		</profile>
		<profile>
			<id>remove.old.build</id>
			<activation>
				<property>
					<name>build.remove.old</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>remove-old-artifacts</id>
								<phase>package</phase>
								<goals>
									<goal>remove-project-artifact</goal>
								</goals>
								<configuration>
									<removeAll>false</removeAll><!-- When true, remove all built artifacts 
										including all versions. When false, remove all built artifacts of this project 
										version -->
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- This profile is used to gather code coverage for Sonar -->
		<profile>
			<id>codeCoverage</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<!-- Sonar -->
				<!-- ************************ -->
				<!-- Sonar/Reporting settings -->
				<!-- ************************ -->
				<!-- Sonar/Jacoco integration. Note that these properties need to be 
					defined outside the "coverage" profile because we want to be to able to execute 
					mvn sonar:sonar without passing a profile -->
				<!-- Tells Sonar to use jacoco for coverage results -->
				<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
				<!-- The Sonar Jacoco Listener for JUnit to extract coverage details 
					per test -->
				<sonar-jacoco-listeners.version>2.1</sonar-jacoco-listeners.version>
				<!-- Don't let Sonar execute tests. We will ask it to Maven -->
				<sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
				<!-- The system property jacoco.outputDir needs to be override on the 
					command line with an absolute path if you want to merge results from all 
					modules. Example in a Jenkins build where ${WORKSPACE} is defined and your 
					project is in the root directory of the workspace : mvn clean install -Prun-its,coverage 
					-Djacoco.outputDir=${WORKSPACE}/target Note that unfortunately using the 
					following does not work because of http://jira.codehaus.org/browse/SONAR-3427: 
					<jacoco.outputDir>${session.executionRootDirectory}/target/</jacoco.outputDir> -->
				<jacoco.outputDir>${project.build.directory}</jacoco.outputDir>
				<!-- Jacoco output file for UTs -->
				<jacoco.out.ut.file>jacoco-ut.exec</jacoco.out.ut.file>
				<!-- Tells Sonar where the Jacoco coverage result file is located for 
					Unit Tests -->
				<sonar.jacoco.reportPath>${jacoco.outputDir}/${jacoco.out.ut.file}</sonar.jacoco.reportPath>
				<!-- Jacoco output file for ITs -->
				<jacoco.out.it.file>jacoco-it.exec</jacoco.out.it.file>
				<!-- Tells Sonar where the Jacoco coverage result file is located for 
					Integration Tests -->
				<sonar.jacoco.itReportPath>${jacoco.outputDir}/${jacoco.out.it.file}</sonar.jacoco.itReportPath>
				<sonar.language>java</sonar.language>
				<jacoco.version>0.7.0.201403182114</jacoco.version>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<argLine>${jacoco.agent.ut.arg}</argLine>
							<!-- Specific to generate mapping between tests and covered code -->
							<properties>
								<property>
									<name>listener</name>
									<value>org.sonar.java.jacoco.JUnitListener</value>
								</property>
							</properties>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<configuration>
							<argLine>-Xmx1024m -XX:MaxPermSize=256m ${jacoco.agent.it.arg}</argLine>
							<!-- Specific to generate mapping between tests and covered code -->
							<properties>
								<property>
									<name>listener</name>
									<value>org.sonar.java.jacoco.JUnitListener</value>
								</property>
							</properties>
							<!-- Let's put failsafe reports with surefire to have access to tests 
								failures/success reports in sonar -->
							<reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
						</configuration>
					</plugin>
					<!-- Enabling use of jacoco -->
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<executions>
							<!-- Prepares a variable, jacoco.agent.ut.arg, that contains the info 
								to be passed to the JVM hosting the code being tested. -->
							<execution>
								<id>prepare-ut-agent</id>
								<phase>process-test-classes</phase>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
								<configuration>
									<destFile>${sonar.jacoco.reportPath}</destFile>
									<propertyName>jacoco.agent.ut.arg</propertyName>
									<append>true</append>
								</configuration>
							</execution>
							<!-- Prepares a variable, jacoco.agent.it.arg, that contains the info 
								to be passed to the JVM hosting the code being tested. -->
							<execution>
								<id>prepare-it-agent</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
								<configuration>
									<destFile>${sonar.jacoco.itReportPath}</destFile>
									<propertyName>jacoco.agent.it.arg</propertyName>
									<append>true</append>
								</configuration>
							</execution>
							<execution>
								<id>post-test</id>
								<goals>
									<goal>report</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
			<dependencies>
				<dependency>
					<groupId>org.codehaus.sonar-plugins.java</groupId>
					<artifactId>sonar-jacoco-listeners</artifactId>
					<version>${sonar-jacoco-listeners.version}</version>
					<scope>test</scope>
				</dependency>
			</dependencies>
		</profile>
	</profiles>

	<developers>
		<developer>
			<id>cvgaviao</id>
			<name>Cristiano GaviÃ£o</name>
			<email>cvgaviao@gmail.com</email>
			<timezone>-3</timezone>
			<roles>
				<role>Developer</role>
			</roles>
		</developer>
		<developer>
			<id>florianpirchner</id>
			<name>Florian Pirchner</name>
			<email>florian.pirchner@gmail.com</email>
			<timezone>+2</timezone>
			<roles>
				<role>Developer</role>
			</roles>
		</developer>
	</developers>

	<build>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>parse-version</id>
						<goals>
							<goal>parse-version</goal>
						</goals>
						<phase>initialize</phase>
					</execution>
				</executions>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>2.6</version>
					<configuration>
						<encoding>UTF-8</encoding>
					</configuration>
				</plugin>
				<plugin>
					<artifactId>maven-clean-plugin</artifactId>
					<version>2.5</version>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>build-helper-maven-plugin</artifactId>
					<version>1.8</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-antrun-plugin</artifactId>
					<version>1.7</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.1</version>
					<configuration>
						<source>1.7</source>
						<target>1.7</target>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-install-plugin</artifactId>
					<version>2.5.1</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>2.4</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>2.8.1</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-site-plugin</artifactId>
					<version>3.3</version>
				</plugin>
				<plugin>
					<groupId>org.codehaus.sonar</groupId>
					<artifactId>sonar-maven-plugin</artifactId>
					<version>4.0</version>
				</plugin>
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${jacoco.version}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.16</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jarsigner-plugin</artifactId>
					<version>1.2</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<version>2.2.1</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>2.9.1</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-release-plugin</artifactId>
					<version>2.4.2</version>
				</plugin>
				<plugin>
					<groupId>com.mycila.maven-license-plugin</groupId>
					<artifactId>maven-license-plugin</artifactId>
					<version>1.10.b1</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-gpg-plugin</artifactId>
					<version>1.4</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<version>2.16</version>
					<inherited>true</inherited>
					<configuration>
						<failIfNoTests>false</failIfNoTests>
						<parallel>none</parallel>
						<threadCount>1</threadCount>
						<includes>
							<include>**/*IntegrationTest.java</include>
						</includes>
						<systemProperties>
							<property>
								<name>project.version</name>
								<value>${project.version}</value>
							</property>
						</systemProperties>
					</configuration>
					<executions>
						<execution>
							<id>integration-test</id>
							<goals>
								<goal>integration-test</goal>
							</goals>
						</execution>
						<execution>
							<id>verify</id>
							<goals>
								<goal>verify</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.fornax.toolsupport</groupId>
					<artifactId>fornax-oaw-m2-plugin</artifactId>
					<version>3.4.0</version>
					<configuration>
						<workflowEngine>mwe2</workflowEngine>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.eclipse.xtend</groupId>
					<artifactId>xtend-maven-plugin</artifactId>
					<version>2.4.3</version>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<dependencyManagement>
		<dependencies>
			<!-- Used in order to import all dependencies with versions avoiding duplicate 
				things -->
			<dependency>
				<groupId>org.lunifera.releng.maven</groupId>
				<artifactId>org.lunifera.releng.maven.parent</artifactId>
				<version>${lunifera.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.lunifera.runtime</groupId>
			<artifactId>org.lunifera.runtime.kernel.api</artifactId>
			<version>${project.version}</version>
		</dependency>

	</dependencies>

</project>